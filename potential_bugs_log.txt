# Potential Bugs Log for mcp-codebase-searcher

## Date: 2024-07-29

**Issue 1:** `no_results.json` file not created when search yields no matches.

*   **Task Reference:** Task 22 (SCH-015: No Matches Found)
*   **Command:** `mcp-searcher search "nonexistent_term_xyz123" sample_project --output-format json --output-file no_results.json`
*   **Observed Behavior:** The console correctly reported "No matches found for your query.", but the `no_results.json` file was not created in the `mcp_searcher_test_env` directory.
*   **Expected Behavior:** The `no_results.json` file should be created, containing an empty JSON array `[]` or equivalent, to indicate no results when an output file is specified.
*   **Impact:** May lead to confusion or break automated scripts expecting the output file to always exist if specified in the command.

**Issue 2:** Incorrect error message for malformed JSON report file.

*   **Task Reference:** Task 34 (ELB-008: Elaborate Error: Malformed JSON)
*   **Command:** `mcp-searcher elaborate --report-file malformed.json --finding-id 0 --api-key YOUR_KEY`
*   **Observed Behavior:** The command failed with "Error: Report file not found at 'malformed.json'." even though `malformed.json` was present but contained invalid JSON.
*   **Expected Behavior:** The command should fail with an error message indicating a JSON decoding error or that the file is not valid JSON.
*   **Impact:** Misleading error message makes debugging harder.

**Issue 3:** `elaborate` command unexpectedly succeeds when testing for "API Key Not Found" scenario.

*   **Task Reference:** Task 35 (ELB-009: Elaborate Error: API Key Not Found)
*   **Command:** `mcp-searcher elaborate --report-file results.json --finding-id 0` (run after attempting to ensure no API key was provided via command-line argument, a specified config file, or known `.env` files in the immediate test or project directories).
*   **Observed Behavior:** The command successfully initialized the Gemini model and provided an elaboration. This indicates an API key was found from an unexpected or persistent source (e.g., system-wide environment variable, user-level default config file for the tool, or a `.env` file in an unexpected lookup path).
*   **Expected Behavior for Test ELB-009:** The command should have failed with an informative error message stating that the Google API key was not found or could not be resolved.
*   **Impact:** This prevents the ability to properly test the tool's specific error handling path for a completely missing API key. The tool's key discovery mechanism might be broader than anticipated by the test plan, or the test environment isn't sufficiently isolated from user/system-level configurations.

**Issue 4:** `elaborate` command returns exit code 0 with invalid API key.

*   **Task Reference:** Task 36 (ELB-010: Elaborate Error: Invalid API Key)
*   **Command:** `mcp-searcher elaborate --report-file results.json --finding-id 0 --api-key INVALID_KEY_XYZ`
*   **Observed Behavior:** The command printed a warning about the invalid API key but exited with status code 0.
*   **Expected Behavior:** The command should exit with a non-zero status code when an API error due to an invalid key occurs, to signal failure to calling scripts or processes.
*   **Impact:** Automated processes might incorrectly interpret the command as successful despite the API error.

**Issue 5:** Persistent warning about 'config' module import.

*   **Task Reference:** Observed during various tasks, including Task 38 (USM-002).
*   **Commands:** e.g., `mcp-searcher elaborate --finding-id 0 --api-key KEY`, `mcp-searcher elaborate --report-file file.json --api-key KEY`
*   **Observed Behavior:** The command prints `Warning: Could not import '.'config' module. API key loading might rely on direct environment variables. Error: attempted relative import with no known parent package` before other output or errors, even when the primary function/error handling of the command is correct.
*   **Expected Behavior:** Such warnings, if benign and related to development/packaging nuances, should ideally not be shown to the end-user of an installed package, or there should be a clear way to suppress them if they are not indicative of a problem affecting the user.
*   **Impact:** May cause unnecessary concern or confusion for users, making them think there's a problem with their API key setup or installation even when there isn't. 