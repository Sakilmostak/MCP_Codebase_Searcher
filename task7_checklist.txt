Task #7: Develop Output Generation Module (`output_generator.py`) - Checklist

*   [ ] **7.1: Define `OutputGenerator` Class/Module Structure**
    *   [ ] Create `output_generator.py`.
    *   [ ] Define `OutputGenerator` class or standalone functions.
    *   [ ] `__init__` (if class-based) or function parameters to accept output format (e.g., 'console', 'json', 'md').

*   [ ] **7.2: Implement Console Output Formatting**
    *   [ ] Method/function: `format_console(results, elaborations=None)` where `results` is a list of match dictionaries, and `elaborations` is an optional dictionary mapping a unique match identifier to its elaboration text.
    *   [ ] Replicate and refine the current console output from `mcp_searcher.py`.
    *   [ ] Ensure clear separation between matches and (if present) elaborations.

*   [ ] **7.3: Implement JSON Output Formatting**
    *   [ ] Method/function: `format_json(results, elaborations=None)`.
    *   [ ] Structure the JSON output to include:
        *   A top-level list of matches.
        *   Each match object containing: `file_path`, `line_number`, `match_text`, `snippet`.
        *   If elaboration is present for a match, include an `elaboration` field in the match object.
    *   [ ] Use `json.dumps()` with indentation for readability.

*   [ ] **7.4: Implement Markdown Output Formatting**
    *   [ ] Method/function: `format_markdown(results, elaborations=None)`.
    *   [ ] Structure the Markdown output:
        *   [ ] Use headings for file paths.
        *   [ ] Use blockquotes or code blocks for snippets.
        *   [ ] Clearly indicate line numbers.
        *   [ ] Format elaborations distinctly (e.g., blockquote or different heading level).

*   [x] **7.5: Integrate `OutputGenerator` into `mcp_searcher.py`**
    *   [x] Add a new CLI argument: `--output-format {console,json,md}` (default: 'console').
    *   [x] Add a new CLI argument: `--output-file FILE` (optional; if provided, write formatted output to this file instead of stdout).
    *   [x] In `mcp_searcher.py`, instantiate `OutputGenerator` based on `args.output_format`.
    *   [x] Instead of printing directly, collect all results (and elaborations if `-e` is used) into a structured list.
    *   [x] After all searching and elaboration is done, call the appropriate formatting method from `OutputGenerator`.
    *   [x] Print the formatted output to stdout or write to `args.output_file`.
    *   [x] Ensured "Elaborating..." messages go to stderr for console format only.

*   [x] **7.6: Add Basic `if __name__ == '__main__':` Test Block for `output_generator.py`**
    *   [x] Create sample `results` and `elaborations` data. (Already done as part of initial `output_generator.py` dev)
    *   [x] Test each formatting function (`format_console`, `format_json`, `format_markdown`) and print/save their output. (Already done)

*   [x] **7.7: Manual Testing of Different Output Formats via `mcp_searcher.py`**
    *   [x] Test console output (default).
    *   [x] Test JSON output to stdout.
    *   [x] Test Markdown output to stdout.
    *   [x] Test JSON output to a file.
    *   [x] Test Markdown output to a file.
    *   [x] Test with and without the `-e` (elaborate) flag for each format.
    *   [x] Test behavior with no matches found.
    *   [x] Test behavior with non-existent output file directory (fallback to console).

*   [x] **7.8: (Optional) Unit Tests for `OutputGenerator`**
    *   [x] Test each formatting function with various inputs (empty results, results with/without elaborations).
    *   [x] Test initialization with different formats (console, json, md, unknown, case-insensitivity).
    *   [x] Test correct dispatching in `generate_output` based on initialized format.

**Status: Completed.** 