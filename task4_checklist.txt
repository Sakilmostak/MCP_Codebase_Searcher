Task #4: Develop Core Search Logic Module - Checklist

*   [x] **4.1: Define `Searcher` Class/Module Structure (`mcp_search.py`)**
    *   [x] Create `mcp_search.py`.
    *   [x] Define `Searcher` class.
    *   [x] `__init__`: Accept search query, case sensitivity flag, regex flag, context window size.
    *   [x] Placeholder for `search_files(self, file_paths)` method.
    *   [x] Placeholder for `_read_file_content(self, file_path)` method.
    *   [x] Placeholder for `_search_in_content(self, content, file_path)` method.
    *   [x] Placeholder for `_generate_snippet(self, content, match_start, match_end)` method.
    *   [x] Handle read errors gracefully (e.g., file not found, permission denied after scan).
    *   [x] Store all matches (start index, end index, line number).

*   [x] **4.2: Implement Text File Reading Functionality** (in `_read_file_content`)
    *   [x] Open and read text files.
    *   [x] Handle potential encoding issues (e.g., try UTF-8, fallback to others like latin-1, or allow configuration). For now, start with UTF-8.
    *   [x] Handle read errors gracefully (e.g., file not found, permission denied after scan).

*   [x] **4.3: Implement Core String/Regex Search Logic** (in `_search_in_content`)
    *   [x] If regex flag is true, use `re` module for searching.
    *   [x] Handle `re.error` if regex is invalid. (Done in `__init__` where `compiled_regex` is created)
    *   [x] If regex flag is false, perform plain string search.
    *   [x] Implement case sensitivity based on the flag.
    *   [x] Store all matches (start index, end index, line number).

*   [x] **4.4: Implement Context Snippet Generation** (in `_generate_snippet`)
    *   [x] Given content and a match (start/end index), extract a snippet. (Note: Method takes line-specific indices)
    *   [x] Include `N` lines/characters of context before and after the match line (configurable via context window size).
    *   [x] Clearly indicate the matched term within the snippet.

*   [x] **4.5: Integrate with `FileScanner` to Get File List** (in `search_files`)
    *   [x] The `search_files` method will iterate through file paths provided to it.
    *   [x] For each file:
        *   [x] Call `_read_file_content`.
        *   [x] Call `_search_in_content`.
        *   [x] For each match, call `_generate_snippet`.
    *   [x] Aggregate results (e.g., list of dictionaries, each with file path, line number, snippet, match).

*   [x] **4.6: Add Unit Tests for Searcher Module**
    *   [x] Create `test_mcp_search.py`.
    *   [x] Test `_read_file_content` (different encodings if implemented, errors).
    *   [x] Test `_search_in_content` (plain string, regex, case sensitivity, multiple matches).
    *   [x] Test `_generate_snippet` (various context window sizes, match at start/middle/end of file).
    *   [x] Test `search_files` integration with mock file content and expected results.

*   [x] **4.7: Test `Searcher` class with `if __name__ == '__main__':` block** (New Item)
    *   [x] Add temporary main block in `mcp_search.py` for manual testing.
    *   [x] Test with sample files and various queries.
    *   [x] Remove/comment out main block when done.

**Status: Completed.** 